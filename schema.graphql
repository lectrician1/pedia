schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "article_versions"
"""
type article_versions {
  concept_id: bigint
  created_at: timestamptz!
  id: bigint!
  name: String!
  text: String
}

"""
aggregated selection of "article_versions"
"""
type article_versions_aggregate {
  aggregate: article_versions_aggregate_fields
  nodes: [article_versions!]!
}

"""
aggregate fields of "article_versions"
"""
type article_versions_aggregate_fields {
  avg: article_versions_avg_fields
  count(columns: [article_versions_select_column!], distinct: Boolean): Int!
  max: article_versions_max_fields
  min: article_versions_min_fields
  stddev: article_versions_stddev_fields
  stddev_pop: article_versions_stddev_pop_fields
  stddev_samp: article_versions_stddev_samp_fields
  sum: article_versions_sum_fields
  var_pop: article_versions_var_pop_fields
  var_samp: article_versions_var_samp_fields
  variance: article_versions_variance_fields
}

"""aggregate avg on columns"""
type article_versions_avg_fields {
  concept_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "article_versions". All fields are combined with a logical 'AND'.
"""
input article_versions_bool_exp {
  _and: [article_versions_bool_exp!]
  _not: article_versions_bool_exp
  _or: [article_versions_bool_exp!]
  concept_id: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  id: bigint_comparison_exp
  name: String_comparison_exp
  text: String_comparison_exp
}

"""
unique or primary key constraints on table "article_versions"
"""
enum article_versions_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  articles_pkey
}

"""
input type for incrementing numeric columns in table "article_versions"
"""
input article_versions_inc_input {
  concept_id: bigint
  id: bigint
}

"""
input type for inserting data into table "article_versions"
"""
input article_versions_insert_input {
  concept_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  text: String
}

"""aggregate max on columns"""
type article_versions_max_fields {
  concept_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  text: String
}

"""aggregate min on columns"""
type article_versions_min_fields {
  concept_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  text: String
}

"""
response of any mutation on the table "article_versions"
"""
type article_versions_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [article_versions!]!
}

"""
on_conflict condition type for table "article_versions"
"""
input article_versions_on_conflict {
  constraint: article_versions_constraint!
  update_columns: [article_versions_update_column!]! = []
  where: article_versions_bool_exp
}

"""Ordering options when selecting data from "article_versions"."""
input article_versions_order_by {
  concept_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  text: order_by
}

"""primary key columns input for table: article_versions"""
input article_versions_pk_columns_input {
  id: bigint!
}

"""
select columns of table "article_versions"
"""
enum article_versions_select_column {
  """column name"""
  concept_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  text
}

"""
input type for updating data in table "article_versions"
"""
input article_versions_set_input {
  concept_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  text: String
}

"""aggregate stddev on columns"""
type article_versions_stddev_fields {
  concept_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type article_versions_stddev_pop_fields {
  concept_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type article_versions_stddev_samp_fields {
  concept_id: Float
  id: Float
}

"""
Streaming cursor of the table "article_versions"
"""
input article_versions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: article_versions_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input article_versions_stream_cursor_value_input {
  concept_id: bigint
  created_at: timestamptz
  id: bigint
  name: String
  text: String
}

"""aggregate sum on columns"""
type article_versions_sum_fields {
  concept_id: bigint
  id: bigint
}

"""
update columns of table "article_versions"
"""
enum article_versions_update_column {
  """column name"""
  concept_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  text
}

input article_versions_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: article_versions_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: article_versions_set_input

  """filter the rows which have to be updated"""
  where: article_versions_bool_exp!
}

"""aggregate var_pop on columns"""
type article_versions_var_pop_fields {
  concept_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type article_versions_var_samp_fields {
  concept_id: Float
  id: Float
}

"""aggregate variance on columns"""
type article_versions_variance_fields {
  concept_id: Float
  id: Float
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "article_versions"
  """
  delete_article_versions(
    """filter the rows which have to be deleted"""
    where: article_versions_bool_exp!
  ): article_versions_mutation_response

  """
  delete single row from the table: "article_versions"
  """
  delete_article_versions_by_pk(id: bigint!): article_versions

  """
  delete data from the table: "prompts"
  """
  delete_prompts(
    """filter the rows which have to be deleted"""
    where: prompts_bool_exp!
  ): prompts_mutation_response

  """
  delete single row from the table: "prompts"
  """
  delete_prompts_by_pk(id: bigint!): prompts

  """
  insert data into the table: "article_versions"
  """
  insert_article_versions(
    """the rows to be inserted"""
    objects: [article_versions_insert_input!]!

    """upsert condition"""
    on_conflict: article_versions_on_conflict
  ): article_versions_mutation_response

  """
  insert a single row into the table: "article_versions"
  """
  insert_article_versions_one(
    """the row to be inserted"""
    object: article_versions_insert_input!

    """upsert condition"""
    on_conflict: article_versions_on_conflict
  ): article_versions

  """
  insert data into the table: "prompts"
  """
  insert_prompts(
    """the rows to be inserted"""
    objects: [prompts_insert_input!]!

    """upsert condition"""
    on_conflict: prompts_on_conflict
  ): prompts_mutation_response

  """
  insert a single row into the table: "prompts"
  """
  insert_prompts_one(
    """the row to be inserted"""
    object: prompts_insert_input!

    """upsert condition"""
    on_conflict: prompts_on_conflict
  ): prompts

  """
  update data of the table: "article_versions"
  """
  update_article_versions(
    """increments the numeric columns with given value of the filtered values"""
    _inc: article_versions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_versions_set_input

    """filter the rows which have to be updated"""
    where: article_versions_bool_exp!
  ): article_versions_mutation_response

  """
  update single row of the table: "article_versions"
  """
  update_article_versions_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: article_versions_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: article_versions_set_input
    pk_columns: article_versions_pk_columns_input!
  ): article_versions

  """
  update multiples rows of table: "article_versions"
  """
  update_article_versions_many(
    """updates to execute, in order"""
    updates: [article_versions_updates!]!
  ): [article_versions_mutation_response]

  """
  update data of the table: "prompts"
  """
  update_prompts(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: prompts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: prompts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: prompts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: prompts_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: prompts_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: prompts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompts_set_input

    """filter the rows which have to be updated"""
    where: prompts_bool_exp!
  ): prompts_mutation_response

  """
  update single row of the table: "prompts"
  """
  update_prompts_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: prompts_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: prompts_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: prompts_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: prompts_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: prompts_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: prompts_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: prompts_set_input
    pk_columns: prompts_pk_columns_input!
  ): prompts

  """
  update multiples rows of table: "prompts"
  """
  update_prompts_many(
    """updates to execute, in order"""
    updates: [prompts_updates!]!
  ): [prompts_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "prompts"
"""
type prompts {
  id: bigint!
  model: String!
  output: String!
  prompt: String!
  prompt_options(
    """JSON select path"""
    path: String
  ): jsonb!
  timestamp: timestamptz!
}

"""
aggregated selection of "prompts"
"""
type prompts_aggregate {
  aggregate: prompts_aggregate_fields
  nodes: [prompts!]!
}

"""
aggregate fields of "prompts"
"""
type prompts_aggregate_fields {
  avg: prompts_avg_fields
  count(columns: [prompts_select_column!], distinct: Boolean): Int!
  max: prompts_max_fields
  min: prompts_min_fields
  stddev: prompts_stddev_fields
  stddev_pop: prompts_stddev_pop_fields
  stddev_samp: prompts_stddev_samp_fields
  sum: prompts_sum_fields
  var_pop: prompts_var_pop_fields
  var_samp: prompts_var_samp_fields
  variance: prompts_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input prompts_append_input {
  prompt_options: jsonb
}

"""aggregate avg on columns"""
type prompts_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "prompts". All fields are combined with a logical 'AND'.
"""
input prompts_bool_exp {
  _and: [prompts_bool_exp!]
  _not: prompts_bool_exp
  _or: [prompts_bool_exp!]
  id: bigint_comparison_exp
  model: String_comparison_exp
  output: String_comparison_exp
  prompt: String_comparison_exp
  prompt_options: jsonb_comparison_exp
  timestamp: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "prompts"
"""
enum prompts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  prompts_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input prompts_delete_at_path_input {
  prompt_options: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input prompts_delete_elem_input {
  prompt_options: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input prompts_delete_key_input {
  prompt_options: String
}

"""
input type for incrementing numeric columns in table "prompts"
"""
input prompts_inc_input {
  id: bigint
}

"""
input type for inserting data into table "prompts"
"""
input prompts_insert_input {
  id: bigint
  model: String
  output: String
  prompt: String
  prompt_options: jsonb
  timestamp: timestamptz
}

"""aggregate max on columns"""
type prompts_max_fields {
  id: bigint
  model: String
  output: String
  prompt: String
  timestamp: timestamptz
}

"""aggregate min on columns"""
type prompts_min_fields {
  id: bigint
  model: String
  output: String
  prompt: String
  timestamp: timestamptz
}

"""
response of any mutation on the table "prompts"
"""
type prompts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [prompts!]!
}

"""
on_conflict condition type for table "prompts"
"""
input prompts_on_conflict {
  constraint: prompts_constraint!
  update_columns: [prompts_update_column!]! = []
  where: prompts_bool_exp
}

"""Ordering options when selecting data from "prompts"."""
input prompts_order_by {
  id: order_by
  model: order_by
  output: order_by
  prompt: order_by
  prompt_options: order_by
  timestamp: order_by
}

"""primary key columns input for table: prompts"""
input prompts_pk_columns_input {
  id: bigint!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input prompts_prepend_input {
  prompt_options: jsonb
}

"""
select columns of table "prompts"
"""
enum prompts_select_column {
  """column name"""
  id

  """column name"""
  model

  """column name"""
  output

  """column name"""
  prompt

  """column name"""
  prompt_options

  """column name"""
  timestamp
}

"""
input type for updating data in table "prompts"
"""
input prompts_set_input {
  id: bigint
  model: String
  output: String
  prompt: String
  prompt_options: jsonb
  timestamp: timestamptz
}

"""aggregate stddev on columns"""
type prompts_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type prompts_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type prompts_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "prompts"
"""
input prompts_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: prompts_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input prompts_stream_cursor_value_input {
  id: bigint
  model: String
  output: String
  prompt: String
  prompt_options: jsonb
  timestamp: timestamptz
}

"""aggregate sum on columns"""
type prompts_sum_fields {
  id: bigint
}

"""
update columns of table "prompts"
"""
enum prompts_update_column {
  """column name"""
  id

  """column name"""
  model

  """column name"""
  output

  """column name"""
  prompt

  """column name"""
  prompt_options

  """column name"""
  timestamp
}

input prompts_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: prompts_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: prompts_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: prompts_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: prompts_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: prompts_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: prompts_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: prompts_set_input

  """filter the rows which have to be updated"""
  where: prompts_bool_exp!
}

"""aggregate var_pop on columns"""
type prompts_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type prompts_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type prompts_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "article_versions"
  """
  article_versions(
    """distinct select on columns"""
    distinct_on: [article_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_versions_order_by!]

    """filter the rows returned"""
    where: article_versions_bool_exp
  ): [article_versions!]!

  """
  fetch aggregated fields from the table: "article_versions"
  """
  article_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [article_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_versions_order_by!]

    """filter the rows returned"""
    where: article_versions_bool_exp
  ): article_versions_aggregate!

  """
  fetch data from the table: "article_versions" using primary key columns
  """
  article_versions_by_pk(id: bigint!): article_versions

  """
  fetch data from the table: "prompts"
  """
  prompts(
    """distinct select on columns"""
    distinct_on: [prompts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompts_order_by!]

    """filter the rows returned"""
    where: prompts_bool_exp
  ): [prompts!]!

  """
  fetch aggregated fields from the table: "prompts"
  """
  prompts_aggregate(
    """distinct select on columns"""
    distinct_on: [prompts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompts_order_by!]

    """filter the rows returned"""
    where: prompts_bool_exp
  ): prompts_aggregate!

  """fetch data from the table: "prompts" using primary key columns"""
  prompts_by_pk(id: bigint!): prompts
}

type subscription_root {
  """
  fetch data from the table: "article_versions"
  """
  article_versions(
    """distinct select on columns"""
    distinct_on: [article_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_versions_order_by!]

    """filter the rows returned"""
    where: article_versions_bool_exp
  ): [article_versions!]!

  """
  fetch aggregated fields from the table: "article_versions"
  """
  article_versions_aggregate(
    """distinct select on columns"""
    distinct_on: [article_versions_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [article_versions_order_by!]

    """filter the rows returned"""
    where: article_versions_bool_exp
  ): article_versions_aggregate!

  """
  fetch data from the table: "article_versions" using primary key columns
  """
  article_versions_by_pk(id: bigint!): article_versions

  """
  fetch data from the table in a streaming manner: "article_versions"
  """
  article_versions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [article_versions_stream_cursor_input]!

    """filter the rows returned"""
    where: article_versions_bool_exp
  ): [article_versions!]!

  """
  fetch data from the table: "prompts"
  """
  prompts(
    """distinct select on columns"""
    distinct_on: [prompts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompts_order_by!]

    """filter the rows returned"""
    where: prompts_bool_exp
  ): [prompts!]!

  """
  fetch aggregated fields from the table: "prompts"
  """
  prompts_aggregate(
    """distinct select on columns"""
    distinct_on: [prompts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [prompts_order_by!]

    """filter the rows returned"""
    where: prompts_bool_exp
  ): prompts_aggregate!

  """fetch data from the table: "prompts" using primary key columns"""
  prompts_by_pk(id: bigint!): prompts

  """
  fetch data from the table in a streaming manner: "prompts"
  """
  prompts_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [prompts_stream_cursor_input]!

    """filter the rows returned"""
    where: prompts_bool_exp
  ): [prompts!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
